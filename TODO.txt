Bugs:
-----

TODO:
-----

- Create some sort of IFunctionResolver that gets all functions for the assembly. Then Nettle can scan all assemblies for resolvers.

- Write unit tests:
	- Parser
	- Validator
	- Renderer
	- Full test using compiler


Extensions:
-----------
- Create separate projects for integrations with 3rd party tools like json.net, ncalc etc (would have separate nuget - like Autofac)
	- Create Nettle.Web project with dependencies like json.net etc which has functions for pulling and pushing http resources as well as specialised web api call functions that return json models.
	- Create support for json and xml type models in terms of model bindings.

- Create Nettle.Data project
	- With custom functions and models to read data like csv, xml etc. Functions to read through the imported data model too.
	- Eventually things like Nettle.Data.Sql that could connect to MS SQL Server etc
	- N.b. with Nettle.Web provide functions to read through imported JSON data too (what if it's  XML/Soap?).


Code Cleanup:
-------------

- Split validator like with parser and render code


Low Priority:
-------------

- Functions that can take any number of parameters (will effect validation) in the same way C# allows params
- Consider support for if statement conditions that let you do things like number > 10 or number == 1 etc (that would be contained in brackets? like {{if (number > 10)}})
- Consider support for changing a variable after it has been declared (e.g. {{var counter = 1}} then {{counter++}} etc)
- TemplateContext: lazy load properties on demand (i.e. only when first model binding is rendered, if there are any) to improve performance?
- Add support for caching


Function Ideas:
---------------

- Maths operations such as add, take away, divide and multiply
- Math formula evaluator (use 3rd party tool)
- Call Web API and get JSON result (that can then be used as model data)
	- Async methods so we can handle things like API call function?
	- How do we handle headers? (e.g. security like we use)
	- Get specific value from JSON object function
	- Generic template model to hold HTTP JSON result
