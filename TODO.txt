TODO:
-----

- Complete Wiki

- Flags:
	- Implement {{#DebugMode}}
	- Allow undefined or duplicate variables (option explicit)
	- Require same type redefine (option strict)
	- Disable model inherit for render partial
	- AutoFormat (remove extra tabs and line breaks from code)
	- Minify (remove all line breaks and tabs)
	- Use UTC date
	
- If statement conditions that let you do things like number > 10 or number == 1 etc (that would be contained in brackets? like {{if (number > 10)}})
	"if" statement expressions:
		- Negation (i.e. if not true)
		- Must have a left and right side value
		- Can be any type but must be comparable
		- Checks for equality, not equals, greater than, less than (numbers only), and, or
		- Create boolean expression evaluator

		E.g. {{if false == value}} or {{if number1 > number2 & boolValue}}
		
	- {{else}} and {{else if}} blocks

Extensions:
-----------

- Nettle.Data
	- Eventually things like Nettle.Data.Sql that could connect to MS SQL Server etc
	- N.b. with Nettle.Web provide functions to read through imported JSON data too (what if it's XML/Soap?).

	- Data.SQL
		- Registered connections (name, connection string, provider/db adapter)
		- Execute stored procedure with connection name, procedure name and parameter values. Get result as data grid.
		- Execute general SQL query with connection name and SQL query. Get results as data grid.
		- N.b. how do we ensure read only stored procedure and SQL queries are executed? I.e. ensure no db writes are made - to keep Nettle as a read/render only engine.
	
- Nettle.Web
	Functions.CallWebApi
	- Call a web api and get json result as JObject
	- Get specific value from JSON object function
	- How do we handle headers? (e.g. security like we use)

	Http post and delete? Anything else?

Low Priority:
-------------

- Indexers:
	- Handle path binding index pointers (e.g. Names[counter])
	- Handle nested indexers (e.g. Rows[0].Values[1])
	- Add support for variable adjusters

- Some sort of "List all..." tag that can list all functions or variables or model fields etc (something like {{?@}} for all functions, {{?.}} for variables and {{?$}} for all model bindings

- Create IStringifier interface and integrate into INettleResolver so we can get all formatters for different types (e.g. XmlDocument)

- Upgrade to .NET 4.7 and check how I can create back-wards compatible NuGet packages

- Add support for caching
