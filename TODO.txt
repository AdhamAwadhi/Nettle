Bugs:
-----

TODO:
-----
Functions.Average
- gets the average value in a sequenceof numbers

Functions.Largest
- gets the largest number in a collection of numbers

Functions.Smallest
- gets the smallest number in a collection of numbers

Functions.RandomInteger
- generates a random integer between 2 ranges

Functions.RandomDecimal
- generates a random decimal between 2 ranges


Extensions:
-----------
- Create Nettle.Web project
	HttpGet
	- gets a string result of a http get call

	Functions.CallWebApi
	- call a web api and get json result, this will depend on Nettle.Data extension

	Http post and delete? Anything else?

- Create Nettle.Data project
	Functions.Csv
	- read csv into grid with functions to get arrays of column headers, all rows, top x rows, all cell values in a row. Perhaps if we create a generic grid, can have functions to perform some sort of search and sort?

	Functions.Xml
	- read xml into generic xml container with functions to find all tags of a name and then within that to find sub tags etc. Each tag group would be represented as a mini model and each tag value would be treated as a property.

	Functions.Json
	- as above for xml but for json format

	Functions.ReadTextFile
	- read a plain text file from the file system into a string.

	- Eventually things like Nettle.Data.Sql that could connect to MS SQL Server etc
	- N.b. with Nettle.Web provide functions to read through imported JSON data too (what if it's  XML/Soap?).

- Create Nettle.Math
	Functions.Evaluate
	- evaluates a maths formula using NCalc with support for model bindings


Code Cleanup:
-------------

- Split validator like with parser and render code


Low Priority:
-------------

- Some sort of "List all..." tag that can list all functions or variables or model fields etc (something like {{?@}} for all functions, {{?.}} for variables and {{?$}} for all model bindings
- Array indexer binding (e.g. Names[0] which would get the first item in the array Names)
- Functions that can take any number of parameters (will effect validation) in the same way C# allows params
- Consider support for if statement conditions that let you do things like number > 10 or number == 1 etc (that would be contained in brackets? like {{if (number > 10)}})
- Consider support for changing a variable after it has been declared (e.g. {{var counter = 1}} then {{counter++}} etc)
- TemplateContext: lazy load properties on demand (i.e. only when first model binding is rendered, if there are any) to improve performance?
- Add support for caching


Function Ideas:
---------------

- Read file as string (in Nettle.Data)
- Maths operations such as add, take away, divide and multiply
- Math formula evaluator (use 3rd party tool)
- Call Web API and get JSON result (that can then be used as model data)
	- Async methods so we can handle things like API call function?
	- How do we handle headers? (e.g. security like we use)
	- Get specific value from JSON object function
	- Generic template model to hold HTTP JSON result
